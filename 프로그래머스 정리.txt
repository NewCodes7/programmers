3/6
1. 특정 코드 반복하고 싶을 때 코드.repeat(n)
2. 축적해서 하나의 결괏값 reduce((acc, curr) ⇒ acc + curr, 0) 0 자리는 acc의 초기값
3. 문자열 중 대체 replace(대체하고 싶은, 뭘로) -- 하나밖에 안 바뀜 모두 바꾸려면 /~~/g 정규식!!
4. 정규표현식 [https://curryyou.tistory.com/234](https://curryyou.tistory.com/234) RegExp
5. split(구분자, 최대개수)

3/7
1. Math.sqrt(n): n의 제곱근을 계산합니다.
2. Number.isInteger(): 주어진 값이 정수인지 아닌지를 판별하는 메서드입니다.
3. for (let c of my_string) answer += c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase(); 문자열에서 저렇게 순회 가능!
4. sort(): 오름차순 sort((a,b)=> b-a): 내림차순
5. filter(()=>a): a가 true인 녀석만 남김(원래 배열에서 특정 집단만 남기고 싶을 때)
6. 배열 원하는 위치에 추가: arr.splice(2, 0, 'd') index 2 ('c')의 위치에 요소를 추가
7. 배열 원하는 위치 삭제: arr.splice(1, 2)  index 1 부터 2개의 요소('b', 'e')를 제거
8. 배열 교체: arr.splice(1,1,5) index 1 부터 1개의 요소를 삭제하고 숫자5를 추가
9. splice(start, deleteCount, item1, item2, ...)
10. = 의미 잊지말자
11. 구조분해할당: 객체나 배열을 변수로 분해할 수 있게 해주는 특별한 문법 ex. let [firstName, surname] = "Bora Lee".split(' ');
12. 최댓값 찾기: let max = Math.max(...array);
13. Spread 연산자는 ... 기호를 사용하여 배열, 객체 또는 이터러블(iterable)의 요소를 펼치는 역할
14. arr.indexOf(a): a의 index를 알려주는 함수
15. Array.prototype.map() : 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환
16. sort()의 원래 용도는 알파벳 정렬!!
17. 배열 중복 제거: Set 연산자 이용하거나 filter((c, i)=> indexOf(c) === i)이용 indexOf는 가장 가까운 걸 뱉어내니!
18. 배열이 같은지 비교하고 싶을 때는 뒤에 toString()을 붙이자..아니면 조인!! 그냥 쌩을 비교하면 메모리 주소로 비교하는 듯 (형변환x)

3/8
1. lastIndexOf: 역순으로 index 탐색
2. 문자열에서 특정 문자 개수를 세고 싶다면... split(특정문자).length -1 이용하기!!
3. 연결고리 짓고 싶다면 구조분해할당, 객체(숫자일 때)!
4. 특정 문자들을 찾아야 하는 상황이라면 정규식 떠올리기!
5. str.match(정규식) 하면 찾은거 배열로 뱉어 냄
6. my_string.toLowerCase(): 문자열 전체가 소문자로 됨!
7. 배열 자르고 싶을 때는 splice 배열 일부분 그냥 가져오고 싶을 때는 slice

3/9
1. 배열 생성 다양하게: https://tesseractjh.tistory.com/103

3/10
1. eval('3+4') 사용하지 말 것 보안에 문제된다고 한다.
2. 계산식에서 () 적극적으로 사용하자!
3. 배열 동등한 지 비교할 때는 === 연산자는 x!! 메모리 주소로 비교함...

3/13
1. let ~~ = [["rardss", "123"], ["yyoom", "1234"], ["meosseugi", "1234"]] 이처럼 배열 속 배열 있으면 Map 객체로 다루는 것 고려
2. let map = new Map(~~);
3. map.get(조회), has, delete 등 다양한 메소드 있어 코드의 사용성 전달 명확

4. const arr = new Array(4).fill('A'): 배열 만들기
5. 배열이나 문자열에 특정 원소가 있는지 확인 하려면: .includes(특정원소) 있다면 true반환
6. !: 논리 부정 연산자 !true === false
7. [...Array(n * 3)].map((_, i) => i + 1): [1,2,3,4 ...] 배열 만들기!
8. 소수점 숫자 연산을 할 때는 Math.round() 반올림 사용하자!!(10진수와 2진수 다른 점 이슈)
9. 배열에서 중복 제거하고 싶을 때는 [...new Set(arr)] 그리고 set 객체는 배열과는 다른 데이터 타입이기에 .

3/14 
1. 배열 속 배열을 쓸 일이 있다면 Map 객체를 고려해보자
2. 뭐가 포함되어 있는지 알고 싶을 때 includes('')

3/15
1. map, forEach와 같은 메서드 괄호안에 화살표함수임을 잊지말자 {}!!
2. ['1','2']join(): 1,2 쉼표까지 그냥 합쳐버림
3. join(''): 12 쉼표없이 합침
4. join('-'): 1-2 

3/16
1. 루트계산: Math.sqrt(x)
2. 정수확인: Number.isInteger(x) 혹은 정수%1===0
3. 조건문이 많고 불리언값이 아니라면: 스위치문!

LV1 다시풀기
1. 문자열 내 p와 y의 개수(특정 문자의 개수 세려면 split 활용하거나 match!)
2. 나머지가 1이 되는 수 찾기(반복문 언제 끝날지 모른다면 while!!,
 함수 안 반복문 탈출 break 대신 return으로 나올 수 있다.
  js에서 0이 아닌 모든 숫자는 true로 평가된다!! 따라서 while(i++)과 같은 코딩이 가능해짐.)
3. 두 정수 사이의 합(다양한 풀이 생각, 졸려서 그런지 등차수열임을 눈치 못챘네..)
4. 핸드폰 번호 가리기(문자열 잘라서 가져오고 싶을 때는 str.slice(시작위치, 종료위치) 종료위치 명시 안 하면 끝까지! 음수 인덱스 기억하자, 정규식 풀이 도전)
5. 음양 더하기(무언가를 계속 더하는게 아니라 빼는 게 있어도 reduce 사용가능하다!! cool)

3/17
1. 순수 문자열에서는 splice 못 쓴다!
2. slice(시작, 종료) 종료는 가져오지 않는다! 감안해서 카운팅
3. reduce((a,c,i)) idx도 가져올 수 있다!
4. 쉬운 문제더라도 발문을 잘 읽자!!

LV1 다시풀기
1. 내적(3)
2. 문자열 다루기 기본(정규식 익히기)
3. 부족한 금액 계산하기(코드 두줄)

3/20
1. str.sort(): 대문자 먼저 정렬하고 소문자 정렬해줌.
2. map() => map() => ~~~: 이처럼 map 두번 쓸 수 있음!(2차원 배열이라면) 
3. Number(너무 큰 수) << 오작동 할 수 있음!!
4. 화살표함수에서는 단일표현식으로 작성되어야 함. if문 대신 삼항 조건 연산자 써야 해주는
5. [풀이 전 생각] 큰 숲을 스케치하고 들어가자!! 전체적인 관통이 있어야 코드 간결하게 작성 가능하다!
6. 고정된 값과 변하는 값을 구분하자!! 
7. const rotated = sizes.map(([w, h]) => w < h ? [h, w] : [w, h]); 구조분해할당 이렇게도 활용가능하구나...
8. 123.toString(2) 2진법으로 안 바뀌네 변수 씌워서 하니까 되네
9. 비트 연산자 https://velog.io/@nulbo/TIL-JavaScript-%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90
10. sort() 쓰는 순간 원래 배열 변화생긴다!! 복제하고 싶으면 스프레드 연산자 써라
11. 처음에 숲 그릴 때 예외경우까지 생각하면 더욱 좋다!
12. 'a'.localCompare('b') //-1 sort와 융합한다면 문자열 조금 더 세심하게 정렬가능!

LV1 다시풀기
1. 행렬의 덧셈
2. 최대공약수와 최소공배수(유클리드 호제법)
3. 3진법 뒤집기
4. 이상한 문자 만들기(정규표현식)
5. 시저암호(더효율적으로 조금, 3번풀이)
6. 최소직사각형(간결하게)(5, 6, 7)
7. [1차] 비밀지도(9)
8. 문자열 내 마음대로 정리하기(내 풀이도 좋지만, 12)

3/21
1. replace(), replaceAll() 자동으로 저장 안 된다!!
2. split(),, 단순히 문자열 쪼개주는 게 아니라 무언가를 기준으로 쪼개줄 수 있음을 기억하자!! '특정 문자'를 택하거나 세거나 하는 데 활용가능!!

LV1 다시풀기
1. 숫자 문자열과 영단어(1, 2)
2. 콜라 문제(첫번째 풀이 공식 가볍게 체크)